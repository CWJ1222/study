import { useEffect, useRef, useState } from "react";
import {
  FaCartPlus,
  FaUndoAlt,
  FaTrashAlt,
  FaEdit,
  FaSave,
} from "react-icons/fa";
import Login from "./Login";
import Profile from "./Profile";
import Button from "./atoms/Button";
import SampleAtoms from "./atoms/SampleAtoms";
import Input from "./atoms/Input";

export default function My({
  session: { loginUser, cart },
  signOut,
  signIn,
  removeItem,
  addItem: addCartItem,
  saveItem: saveCartItem,
}) {
  const [isAdding, setIsAdding] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const itemNameRef = useRef();
  const itemPriceRef = useRef();

  const cancelAdding = (evt) => {
    evt.preventDefault();
    setIsAdding(false);
  };

  const addItem = (evt) => {
    evt.preventDefault();
    const itemName = itemNameRef.current.value;
    const itemPrice = itemPriceRef.current.value;
    console.log("üöÄ  itemName, itemPrice:", itemName, itemPrice);
    if (!itemName || !itemPrice) {
      alert("ÏÉÅÌíàÎ™ÖÍ≥º Í∏àÏï°ÏùÑ Ï†ïÌôïÌûà ÏûÖÎ†•ÌïòÏÑ∏Ïöî!");
      itemNameRef.current.focus();
      return;
    }
    addCartItem(itemName, +itemPrice);
    setIsAdding(false);
  };

  const editing = (itemId) => {
    setEditingItem(cart.find((item) => item.id === itemId));
  };
  useEffect(() => {
    if (editingItem) {
      itemNameRef.current.value = editingItem.name;
      itemPriceRef.current.value = editingItem.price;
      itemNameRef.current.select();
    }
  }, [editingItem]);

  const cancelEditing = () => {
    setEditingItem(null);
  };

  const saveItem = (evt) => {
    evt.preventDefault();
    const itemName = itemNameRef.current.value;
    const itemPrice = itemPriceRef.current.value;
    console.log("üöÄ  itemName, itemPrice:", itemName, itemPrice);
    if (!itemName || !itemPrice) {
      alert("ÏÉÅÌíàÎ™ÖÍ≥º Í∏àÏï°ÏùÑ Ï†ïÌôïÌûà ÏûÖÎ†•ÌïòÏÑ∏Ïöî!");
      itemNameRef.current.focus();
      return;
    }
    saveCartItem(editingItem.id, itemName, +itemPrice);
    setEditingItem(null);
  };
const [texts, setTexts] = useState([]);
const titleRef = useRef();
const contentRef = useRef();

const addText = (evt) => {
  evt.preventDefault();
  const newTitle = titleRef.current.value;
  const newContent = contentRef.current.value;
  if (newTitle && newContent) {
    setTexts([{ title: newTitle, content: newContent }, ...texts]);
    titleRef.current.value = "";
    contentRef.current.value = "";
  }
};

    const deleteText = (index) => {
    setTexts(texts.filter((_, i) => i !== index));
  };

  return (
    <>
      {loginUser ? (
        <Profile name={loginUser?.name} signOut={signOut} />
      ) : (
        <Login singIn={signIn} />
      )}
<form onSubmit={addText}>
    <Input ref={titleRef} placeholder="Ï†úÎ™©ÏùÑ Ïì∞ÏÑ∏Ïöî" />
    <Input ref={contentRef} placeholder="ÎÇ¥Ïö©ÏùÑ Ïì∞ÏÑ∏Ïöî" />
    <Button
        text="Í∏Ä Ï∂îÍ∞Ä"
        onClick={addText}
        type="primary"
        size="sm"
    />
</form>
             <table>
        <thead>
          <tr>
            <th>Ï†úÎ™©</th>
            <th>ÎÇ¥Ïö©</th>
          </tr>
        </thead>
        <tbody>
{texts.map((text, index) => (
  <tr key={index}>
    <td>{text.title}</td>
    <td>{text.content}</td>
    <td>
      <Button
        text="Í∏Ä ÏÇ≠Ï†ú"
        onClick={() => deleteText(index)}
        type="primary"
        size="sm"
      />
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="my-5 border text-center">
        <ul>
          {cart?.length
            ? cart.map((item) => (
                <li key={item.id} className="flex justify-between border-b">
                  {editingItem?.id === item.id ? (
                    <form className="m-2 flex gap-3 border border-green-300 p-3">
                      <Input ref={itemNameRef} placeholder="ÏÉÅÌíàÎ™Ö" />
                      <Input
                        ref={itemPriceRef}
                        type="number"
                        placeholder="Í∏àÏï°"
                      />
                      <Button
                        text={<FaUndoAlt />}
                        onClick={cancelEditing}
                        size="sm"
                      />
                      <Button
                        text={<FaSave />}
                        onClick={saveItem}
                        type="primary"
                        size="sm"
                      />
                    </form>
                  ) : (
                    <>
                      <span className="text-xs text-gray-300">{item.id}</span>
                      <strong>
                        {item.name}
                        <small className="ml-2 text-gray-500">
                          ({item.price.toLocaleString()}Ïõê)
                        </small>
                      </strong>
                      <div>
                        <Button
                          onClick={() => editing(item.id)}
                          type="primary"
                          text={<FaEdit />}
                          size="xs"
                          className="py-1"
                        />
                        <Button
                          onClick={() => removeItem(item.id)}
                          type="danger"
                          text={<FaTrashAlt />}
                          size="xs"
                          className="py-1"
                        />
                      </div>
                    </>
                  )}
                </li>
              ))
            : "Ïû•Î∞îÍµ¨ÎãàÍ∞Ä ÎπÑÏóàÏäµÎãàÎã§."}
          
        </ul>
        {isAdding ? (
          <form className="m-2 flex gap-3 border border-green-300 p-3">
            <Input ref={itemNameRef} placeholder="ÏÉÅÌíàÎ™Ö" />
            <Input ref={itemPriceRef} type="number" placeholder="Í∏àÏï°" />
            <Button text={<FaUndoAlt />} onClick={cancelAdding} size="sm" />
            <Button
              text={<FaCartPlus />}
              onClick={addItem}
              type="primary"
              size="sm"
            />
          </form>
        ) : (
          <Button
            onClick={() => setIsAdding(true)}
            text="+ ÏÉÅÌíàÏ∂îÍ∞Ä"
            className="mt-5"
          />
        )}
      </div>

      <SampleAtoms />
  
    </>
  );
}